package ez_phone.dao;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import ez_phone.dao.*;
import ez_phone.dto.*;
import ez_phone.dto.ProductDTO;

public class ProductDAO extends JdbcDAO {
	private static ProductDAO _dao;
	
	private ProductDAO() {
		// TODO Auto-generated constructor stub
	}
	
	static {
		_dao=new ProductDAO();
	}
	
	public static ProductDAO getDAO() {
		return _dao;
	}
	
	public int insertProduct(ProductDTO product) {
		Connection con=null;
		PreparedStatement pstmt=null;
		int rows=0;
		try {
			con=getConnection();
			
			String sql="insert into product values(?,?,?,?,?,?,?,?)";
			pstmt=con.prepareStatement(sql);
			pstmt.setString(1, product.getP_code());
			pstmt.setString(2, product.getP_name());
			pstmt.setString(3, product.getP_image());
			pstmt.setString(4, product.getP_image2());
			pstmt.setInt(5, product.getP_price());
			pstmt.setInt(6, product.getP_stock());
			pstmt.setString(7, product.getP_color());
			pstmt.setString(8, product.getP_size());
			
			rows=pstmt.executeUpdate();
		} catch (SQLException e) {
			System.out.println("[에러]insertProduct 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt);
		}
		return rows;
	}

	public List<ProductDTO> selectProductList(String keyword) {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		List<ProductDTO> ProductList=new ArrayList<ProductDTO>();
		try {
			con=getConnection();
			
			if(keyword.equals("")) {
				String sql="select distinct p_code,p_image,p_name,p_price from product";
				pstmt=con.prepareStatement(sql);
			} else {
				String sql="select distinct p_image,p_name,p_price from product where p_name like '%'||?||'%'";
				pstmt=con.prepareStatement(sql);
				pstmt.setString(1, keyword);
			}
						
			rs=pstmt.executeQuery();
			
			while(rs.next()) {
				ProductDTO product=new ProductDTO();
				product.setP_code(rs.getString("p_code"));
				product.setP_image(rs.getString("p_image"));
				product.setP_name(rs.getString("p_name"));
				product.setP_price(rs.getInt("p_price"));
				ProductList.add(product);
			}
		} catch (SQLException e) {
			System.out.println("[에러]selectProductList 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return ProductList;
	}
	public int searchAllList(String keyword) {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		int count=0;
		try {
			con=getConnection();
			
			//매개변수에 전달된 값을 비교하여 다른 SQL 명령을 전달하여 실행되도록 설정
			// => 동적 SQL(Dynamic SQL) 기능 사용
			if(keyword.equals("")) {//검색 기능을 사용하지 않은 경우
				String sql="select distinct p_image,p_name,p_price from product";
				pstmt=con.prepareStatement(sql);
			} else {//검색 기능을 사용한 경우
				//검색대상은 값이 아니므로 ?(InParameter)로 표현 불가능 - 문자열 결합
				String sql="select count(distinct p_name) from product where p_name like '%'||?||'%'";
				pstmt=con.prepareStatement(sql);
				pstmt.setString(1, keyword);
			}
			
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				count=rs.getInt(1);
			}
		} catch (SQLException e) {
			System.out.println("[에러]searchAlllist 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return count;
	}
	
	public List<ProductDTO> selectGalaxyList() {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		List<ProductDTO> productList=new ArrayList<ProductDTO>();
		try {
			con=getConnection();
			
			String sql="select distinct p_code,p_image,p_name,p_price from product where p_code like '%gallaxy%'";
			pstmt=con.prepareStatement(sql);
			
			rs=pstmt.executeQuery();
			
			while(rs.next()) {
				ProductDTO product=new ProductDTO();
				product.setP_code(rs.getString("p_code"));
				product.setP_image(rs.getString("p_image"));
				product.setP_name(rs.getString("p_name"));
				product.setP_price(rs.getInt("p_price"));
				productList.add(product);
			}
		} catch (SQLException e) {
			System.out.println("[에러]selectGalaxyList 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return productList;
	}
	
	public List<ProductDTO> selectIphoneList() {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		List<ProductDTO> productList=new ArrayList<ProductDTO>();
		try {
			con=getConnection();
			
			String sql="select distinct p_code,p_image,p_name,p_price from product where p_code like '%iphone%'";
			pstmt=con.prepareStatement(sql);
			
			rs=pstmt.executeQuery();
			
			while(rs.next()) {
				ProductDTO product=new ProductDTO();
				product.setP_code(rs.getString("p_code"));
				product.setP_image(rs.getString("p_image"));
				product.setP_name(rs.getString("p_name"));
				product.setP_price(rs.getInt("p_price"));
				productList.add(product);
			}
		} catch (SQLException e) {
			System.out.println("[에러]selectIphoneList 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}
		return productList;
	}
	
	public ProductDTO selectProduct(String p_code) {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		ProductDTO product=null;
		try {
			con=getConnection();
			
			String sql="select * from product where p_code=?";
			pstmt=con.prepareStatement(sql);
			pstmt.setString(1, p_code);
			
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				product=new ProductDTO();
				product.setP_code(rs.getString("p_code"));
				product.setP_name(rs.getString("p_name"));
				product.setP_image(rs.getString("p_image"));
				product.setP_image2(rs.getString("p_image2"));
				product.setP_price(rs.getInt("p_price"));
				product.setP_stock(rs.getInt("p_stock"));
				product.setP_color(rs.getString("p_color"));
				product.setP_size(rs.getString("p_size"));
			}
		} catch (SQLException e) {
			System.out.println("[에러]selectProduct 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}	
		return product;
	}
	public ProductDTO searchProduct(String p_name) {
		Connection con=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		ProductDTO product=null;
		try {
			con=getConnection();
			
			String sql="select * from product where p_name=?";
			pstmt=con.prepareStatement(sql);
			pstmt.setString(1, p_name);
			
			rs=pstmt.executeQuery();
			
			if(rs.next()) {
				product=new ProductDTO();
				product.setP_code(rs.getString("p_code"));
				product.setP_name(rs.getString("p_name"));
				product.setP_image(rs.getString("p_image"));
				product.setP_image2(rs.getString("p_image2"));
				product.setP_price(rs.getInt("p_price"));
				product.setP_stock(rs.getInt("p_stock"));
				product.setP_color(rs.getString("p_color"));
				product.setP_size(rs.getString("p_size"));
			}
		} catch (SQLException e) {
			System.out.println("[에러]selectProduct 메소드의 SQL 오류 = "+e.getMessage());
		} finally {
			close(con, pstmt, rs);
		}	
		return product;
	}
	
	//제품정보를 전달받아 PRODUCT 테이블에 저장된 제품정보를 변경하고 변경행의 갯수를 반환하는 메소드
		public int updateProduct(ProductDTO product) {
			Connection con=null;
			PreparedStatement pstmt=null;
			int rows=0;
			try {
				con=getConnection();
				
				String sql="update product set p_code=?,p_image=?,p_image2=?,p_price=?,p_stock=?,p_color=?,p_size=? where p_name=?";
				pstmt=con.prepareStatement(sql);
				pstmt.setString(1, product.getP_code());
				pstmt.setString(2, product.getP_image());
				pstmt.setString(3, product.getP_image2());
				pstmt.setInt(4, product.getP_price());
				pstmt.setInt(5, product.getP_stock());
				pstmt.setString(6, product.getP_color());
				pstmt.setString(7, product.getP_size());
				pstmt.setString(8, product.getP_name());

				
				rows=pstmt.executeUpdate();
			} catch (SQLException e) {
				System.out.println("[에러]updateProduct 메소드의 SQL 오류 = "+e.getMessage());
			} finally {
				close(con, pstmt);
			}
			return rows;
		}
		public int stockCountDown(ProductDTO product) {
			Connection con=null;
			PreparedStatement pstmt=null;
			int rows=0;
			try {
				con=getConnection();
				
				String sql="update product set p_stock=?-1,where p_code=?";
				pstmt=con.prepareStatement(sql);
				pstmt.setInt(1, product.getP_stock());
				pstmt.setString(2, product.getP_code());

				
				rows=pstmt.executeUpdate();
			} catch (SQLException e) {
				System.out.println("[에러]stockCountDown 메소드의 SQL 오류 = "+e.getMessage());
			} finally {
				close(con, pstmt);
			}
			return rows;
		}
}

